import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.3.1'
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.2'
        classpath 'org.javamodularity:moduleplugin:1.6.0'
        classpath 'org.beryx:badass-jlink-plugin:2.16.4'
    }
}

plugins {
    id 'idea'
    id 'java-library'
    id 'application'
    id 'com.google.osdetector' version '1.6.2'
    id 'org.javamodularity.moduleplugin' version '1.6.0'
    id 'org.beryx.jlink' version '2.17.2'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '2.10.0'
    id 'com.jfrog.bintray' version '1.8.5'
}

apply plugin: 'biz.aQute.bnd.builder'

sourceCompatibility = '11'

wrapper {
    gradleVersion = '6.4'
}

description = 'JavaFX controls to control things'

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation "org.openjfx:javafx-base:11:$platform"
    implementation "org.openjfx:javafx-graphics:11:$platform"
    implementation "org.openjfx:javafx-controls:11:$platform"
    implementation 'org.kordamp.ikonli:ikonli-core:11.5.0'
    implementation 'org.kordamp.ikonli:ikonli-javafx:11.5.0'
    implementation 'org.kordamp.ikonli:ikonli-material-pack:11.5.0'
    implementation 'org.kordamp.ikonli:ikonli-materialdesign-pack:11.5.0'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome-pack:11.5.0'
    implementation 'org.kordamp.ikonli:ikonli-weathericons-pack:11.5.0'
}

mainClassName = "$moduleName/eu.hansolo.fx.regulators.Main"

// start the app from gradle
task Demo(type: JavaExec) {
    main = "eu.hansolo.fx.regulators.Launcher"
    classpath = sourceSets.main.runtimeClasspath
}

jar {
    from {
        (configurations.runtimeClasspath).collect {  it.isDirectory() ? it : zipTree(it)  }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    manifest {
        attributes ('Implementation-Title': 'Main',
                'Class-Path': 'Regulators-1.0-SNAPSHOT.jar ',
                'Main-Class': 'eu.hansolo.fx.regulators.Launcher')
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'eu.hansolo.fx.regulators'
    }
}


// create one jar for the javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// create one jar for the source files
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

def pomConfig = {
    name 'regulators'
    // Description won't be used when creating the pom file automatically.
    // So I've added it manually in the pom.withXml{} section in the publishing task
    url 'https://github.com/HanSolo/regulators/wiki'
    inceptionYear '2020'
    licenses {
        license([:]) {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    scm {
        url 'scm:git@github.com:HanSolo/regulators.git'
        connection 'scm:git@github.com:HanSolo/regulators.git'
        developerConnection 'scm:git@github.com:HanSolo/regulators.git'
    }
    developers {
        developer {
            id 'HanSolo'
            name 'Gerrit Grunwald'
        }
    }
}

publishing {
    publications {
        mavenCustom(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().children().last() + pomConfig
                asNode().appendNode('description', description)
            }
        }
    }
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
if (!project.hasProperty('bintrayApiKey')) ext.bintrayApiKey = ''
if (!project.hasProperty('sonatypeUsername')) ext.sonatypeUsername = ''
if (!project.hasProperty('sonatypePassword')) ext.sonatypePassword = ''


bintray {
    user = project.bintrayUsername
    key  = project.bintrayApiKey
    publications = ['mavenCustom']
    pkg {
        repo                  = 'Regulators'
        userOrg               = 'hansolo'
        name                  = project.name
        desc                  = description
        licenses              = ['Apache-2.0']
        labels                = ['java', 'javafx']
        websiteUrl            = 'https://github.com/HanSolo/regulators/wiki'
        issueTrackerUrl       = 'https://github.com/HanSolo/regulators/issues'
        vcsUrl                = 'git@github.com:HanSolo/regulators.git'
        publicDownloadNumbers = true
        version {
            name   = project.version
            vcsTag = project.version
            mavenCentralSync {
                sync = true
                user = project.sonatypeUsername
                password = project.sonatypePassword
                close = '1'
            }
        }
    }
}